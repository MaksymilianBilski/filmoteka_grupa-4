{"mappings":"AAEA,IAAIA,EAAO,GAEPC,EAAa,EAEjB,MAAMC,EAAaC,SAASC,cAAc,eACpCC,EAAgBF,SAASC,cAAc,mBACvCE,EAAYH,SAASC,cAAc,cACnCG,EAAaJ,SAASC,cAAc,eAC1CC,EAAcG,MAAMC,QAAU,OAY9B,WAEEP,EAAWQ,mBAAmB,YAAa,oBAC3CR,EAAWQ,mBAAmB,YAAa,wBAE3C,IAAK,IAAIC,EAAI,EAAGA,GAAK,EAAGA,IACtBT,EAAWQ,mBACT,aACA,8DAA8DC,a,CAnBpEC,GAEA,MAAMC,EAAoBV,SAASW,iBAAiB,sBAwCpD,SAASC,IAEPd,EAAaD,EApDE,IAqDfE,EAAWc,UAAY,GAEvB,IAAK,IAAIL,EAvDM,IAuDUA,GAAKM,GAAgBN,IAC5CT,EAAWQ,mBACT,aACA,qCAAqCC,cAIzCL,EAAUY,UAAUC,OAAO,UAC3BZ,EAAWW,UAAUE,IAAI,UAGzBlB,EAAWQ,mBAAmB,aAAc,oBAC5CR,EAAWQ,mBAAmB,aAAc,qB,CAK9C,SAASW,IAEPpB,EAAaD,EAAO,EACpBE,EAAWc,UAAY,GAEvB,IAAK,IAAIL,EAAI,EAAGA,GAAK,EAAGA,IACtBT,EAAWQ,mBACT,aACA,qCAAqCC,cAIzCJ,EAAWW,UAAUC,OAAO,UAC5Bb,EAAUY,UAAUE,IAAI,UAExBlB,EAAWQ,mBAAmB,YAAa,oBAC3CR,EAAWQ,mBACT,YACA,iD,CAKJ,SAASY,EAAYC,GAEnBC,QAAQC,IAAIF,EAAEG,QACd1B,EAAOC,EAAasB,EAAEG,OAAOC,YAC7BzB,EAAWc,UAAY,GAEnBY,OAAO3B,IAAe,GAAK2B,OAAO3B,IAAegB,KAEnDf,EAAWQ,mBAAmB,YAAa,oBAC3CR,EAAWQ,mBACT,YACA,mDAIJ,IAAK,IAAIC,EAAIiB,OAAO3B,GAAc,EAAGU,GAAKiB,OAAO3B,GAAc,EAAGU,IAAK,CAErE,GAAIiB,OAAO3B,IAAe,EAOxB,OANAC,EAAWQ,mBAAmB,YAAa,oBAC3CR,EAAWQ,mBACT,YACA,kDAEFW,IACQrB,EAAOC,EAAasB,EAAEM,cAAcF,YAG9C,GAAIC,OAAO3B,IAAegB,GAKxB,OAJAX,EAAUY,UAAUC,OAAO,UAC3BjB,EAAWQ,mBAAmB,aAAc,oBAC5CR,EAAWQ,mBAAmB,aAAc,sBAC5CK,IACQf,EAAOC,EAAasB,EAAEM,cAAcF,YAE9CzB,EAAWQ,mBACT,aACA,qCAAqCC,a,EAvH3CL,EAAUwB,iBAAiB,SAAS,KAClCT,GAAc,IAEhBd,EAAWuB,iBAAiB,SAAS,KACnCf,GAAa,IAqIfb,EAAW4B,iBAAiB,SAb5B,SAAmBP,GAEjB,GAA0B,WAAtBA,EAAEG,OAAOK,UAGJ7B,EAAW8B,SAASC,OAAS,EACpC,IAAK,IAAItB,EAAI,EAAGA,GAAKT,EAAW8B,SAASC,OAAS,EAAGtB,IAEnDT,EAAW8B,SAASrB,GAAGmB,iBAAiB,QAASR,E,IASrDjB,EAAcK,mBACZ,aACA,sCAISP,SAASC,cAAc,SAC/B0B,iBAAiB,SAAS,KAC7BN,QAAQC,IAAIZ,EAAkB","sources":["src/js/pagination.js"],"sourcesContent":["// import { page, renderPost, totalPages } from '';\n// import { Notify } from 'notiflix';\nlet page = 50;\nlet totalPages = 100;\nlet actualPage = 1;\n\nconst pagination = document.querySelector('.pagination');\nconst paginationBox = document.querySelector('.pagination-box');\nconst arrowLeft = document.querySelector('.arrowLeft');\nconst arrowRight = document.querySelector('.arrowRight');\npaginationBox.style.display = 'flex';\nstartState();\n\nconst paginationButtons = document.querySelectorAll('.pagination-button');\n\narrowLeft.addEventListener('click', () => {\n  pageBackward();\n});\narrowRight.addEventListener('click', () => {\n  pageForward();\n});\n\nfunction startState() {\n  //dots before last page + last page\n  pagination.insertAdjacentHTML('beforeend', `<span>...</span>`);\n  pagination.insertAdjacentHTML('beforeend', `<button>${totalPages}</button>`);\n  //creating 1-5 pages\n  for (let i = 5; i >= 1; i--) {\n    pagination.insertAdjacentHTML(\n      'afterbegin',\n      `<button class=\"pagination-button\" style=\"margin-left:2px;\">${i}</button>`\n    );\n  }\n}\n\nfunction middleState() {\n  //loop by the value of total amount of pages.\n  for (let i = 0; i <= totalPages; i++) {\n    // condition for pages between: page 5 and page last-4\n    if (actualPage > 5 && page < totalPages - 4) {\n      // loop that makes pages in middle state( firstPage... thisLoopPages ...lastPage)\n      for (let i = actualPage + 2; i >= actualPage - 2; i--) {\n        pagination.insertAdjacentHTML(\n          'afterbegin',\n          `<button class=\"pagination-button\" style=\"margin-left:2px;\">${i}</button>`\n        );\n      }\n      // set the actualPage to middle element of 5 buttons\n      actualPage = pagination.children[2];\n    }\n  }\n}\n\nfunction pageForward() {\n  // set the page and actualPage for last page\n  actualPage = page = totalPages;\n  pagination.innerHTML = '';\n  // creating the last 5 pages\n  for (let i = totalPages; i >= totalPages - 4; i--) {\n    pagination.insertAdjacentHTML(\n      'afterbegin',\n      `<button class=\"pagination-button\">${i}</button>`\n    );\n  }\n  //hide and show arrow\n  arrowLeft.classList.remove('hidden');\n  arrowRight.classList.add('hidden');\n  // paginationButtons = document.querySelectorAll('.pagination-button');\n  //insert first page and dots after it\n  pagination.insertAdjacentHTML('afterbegin', `<span>...</span>`);\n  pagination.insertAdjacentHTML('afterbegin', `<button>${1}</button>`);\n\n  // renderPost();\n}\n\nfunction pageBackward() {\n  // setting page and actual page to 1\n  actualPage = page = 1;\n  pagination.innerHTML = '';\n  // creating the first 5 elements\n  for (let i = 5; i >= 1; i--) {\n    pagination.insertAdjacentHTML(\n      'afterbegin',\n      `<button class=\"pagination-button\">${i}</button>`\n    );\n  }\n  // hide and show arrow\n  arrowRight.classList.remove('hidden');\n  arrowLeft.classList.add('hidden');\n  //insert dots at the end, and amount of total pages after it\n  pagination.insertAdjacentHTML('beforeend', `<span>...</span>`);\n  pagination.insertAdjacentHTML(\n    'beforeend',\n    `<button class=\"pagination-button\">${totalPages}</button>`\n  );\n  // renderPost();\n}\n\nfunction buttonClick(e) {\n  //setting page number to clicked button\n  console.log(e.target);\n  page = actualPage = e.target.textContent;\n  pagination.innerHTML = '';\n  // dynamic creating of pages in middle state\n  if (Number(actualPage) >= 5 && Number(actualPage) <= totalPages - 4) {\n    // !!TO DO!! create dots and first element at the begining !!!!\n    pagination.insertAdjacentHTML('beforeend', `<span>...</span>`);\n    pagination.insertAdjacentHTML(\n      'beforeend',\n      `<button class=\"pagination-button\">${totalPages}</button>`\n    );\n  }\n  // dynamic creating first 5 pages, and last 5 pages\n  for (let i = Number(actualPage) + 2; i >= Number(actualPage) - 2; i--) {\n    // first 5 pages condition\n    if (Number(actualPage) <= 3) {\n      pagination.insertAdjacentHTML('beforeend', `<span>...</span>`);\n      pagination.insertAdjacentHTML(\n        'beforeend',\n        `<button class=\"pagination-button\">${totalPages}</button>`\n      );\n      pageBackward();\n      return (page = actualPage = e.currentTarget.textContent);\n    }\n    // last 5 pages condition\n    if (Number(actualPage) >= totalPages - 2) {\n      arrowLeft.classList.remove('hidden');\n      pagination.insertAdjacentHTML('afterbegin', `<span>...</span>`);\n      pagination.insertAdjacentHTML('afterbegin', `<button>${1}</button>`);\n      pageForward();\n      return (page = actualPage = e.currentTarget.textContent);\n    }\n    pagination.insertAdjacentHTML(\n      'afterbegin',\n      `<button class=\"pagination-button\">${i}</button>`\n    );\n  }\n}\n\nfunction changeBtn(e) {\n  // if didnt clicked properly\n  if (e.target.nodeName !== 'BUTTON') {\n    return;\n  } //if there are some buttons do a loop on this buttons\n  else if (pagination.children.length > 0) {\n    for (let i = 0; i <= pagination.children.length - 1; i++) {\n      // !!TO DO!!\n      pagination.children[i].addEventListener('click', buttonClick);\n    }\n  } else return;\n}\n\npagination.addEventListener('click', changeBtn);\n\n//testing functions\nfunction testBtn() {\n  paginationBox.insertAdjacentHTML(\n    'afterbegin',\n    `<button class=\"test\">klik</button>`\n  );\n}\ntestBtn();\nconst tBtn = document.querySelector('.test');\ntBtn.addEventListener('click', () => {\n  console.log(paginationButtons);\n});\n\n// export { page };\n"],"names":["$1bab9c519cfa82bc$var$page","$1bab9c519cfa82bc$var$actualPage","$1bab9c519cfa82bc$var$pagination","document","querySelector","$1bab9c519cfa82bc$var$paginationBox","$1bab9c519cfa82bc$var$arrowLeft","$1bab9c519cfa82bc$var$arrowRight","style","display","insertAdjacentHTML","i","$1bab9c519cfa82bc$var$startState","$1bab9c519cfa82bc$var$paginationButtons","querySelectorAll","$1bab9c519cfa82bc$var$pageForward","innerHTML","$1bab9c519cfa82bc$var$totalPages","classList","remove","add","$1bab9c519cfa82bc$var$pageBackward","$1bab9c519cfa82bc$var$buttonClick","e","console","log","target","textContent","Number","currentTarget","addEventListener","nodeName","children","length"],"version":3,"file":"index.427e10c9.js.map"}